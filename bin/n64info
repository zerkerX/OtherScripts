#!/usr/bin/python3
# Copyright 2016 Ryan Armstrong
#
# This file is part of Game Header Lister.
#
# Game Header Lister is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Game Header Lister is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Game Header Lister.
# If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import struct
import csv
import hashlib
import binascii
import ninlicensee

import pdb

class n64rom:

    #~ 0000h              (1 byte): initial PI_BSB_DOM1_LAT_REG value (0x80)
    #~ 0001h              (1 byte): initial PI_BSB_DOM1_PGS_REG value (0x37)
    #~ 0002h              (1 byte): initial PI_BSB_DOM1_PWD_REG value (0x12)
    #~ 0003h              (1 byte): initial PI_BSB_DOM1_PGS_REG value (0x40)
    #~ 0004h - 0007h     (1 dword): ClockRate
    #~ 0008h - 000Bh     (1 dword): Program Counter (PC)
    #~ 000Ch - 000Fh     (1 dword): Release
    #~ 0010h - 0013h     (1 dword): CRC1
    #~ 0014h - 0017h     (1 dword): CRC2
    #~ 0018h - 001Fh    (2 dwords): Unknown (0x0000000000000000)
    #~ 0020h - 0033h    (20 bytes): Image name
                                 #~ Padded with 0x00 or spaces (0x20)
    #~ 0034h - 0037h     (1 dword): Unknown (0x00000000)
    #~ 0038h - 003Bh     (1 dword): Manufacturer ID
                                 #~ 0x0000004E = Nintendo ('N')
    #~ 003Ch - 003Dh      (1 word): Cartridge ID
    #~ 003Eh - 003Fh      (1 word): Country code
                                 #~ 0x4400 = Germany ('D')
                                 #~ 0x4500 = USA ('E')
                                 #~ 0x4A00 = Japan ('J')
                                 #~ 0x5000 = Europe ('P')
                                 #~ 0x5500 = Australia ('U')
    #~ 0040h - 0FFFh (1008 dwords): Boot code
    header_fmt='>4xL4xLLL8x20s7x4sx'

    def __init__(self, filename):
        self.data = dict()
        self.data['filename'] = filename

        # Read from the default location
        romfile = open(filename, 'rb')

        rawdata = struct.unpack(self.header_fmt,
            romfile.read(struct.calcsize(self.header_fmt)))
        
        #pdb.set_trace()
        
        self.data['clockrate'] = '0x{:08X}'.format(rawdata[0])
        self.data['release'] = '0x{:08X}'.format(rawdata[1])
        self.data['CRC1'] = '0x{:08X}'.format(rawdata[2])
        self.data['CRC2'] = '0x{:08X}'.format(rawdata[3])
        self.data['name'] = rawdata[4].decode().strip('\0').strip()
        self.data['code'] = rawdata[5].decode().strip('\0')        
            
        # Read full file data and calculate relevant hashes:
        romfile.seek(0)
        romdata = romfile.read()

        self.data['filesize'] = len(romdata)
        self.data['crc'] = '{:08X}'.format(binascii.crc32(romdata))
        self.data['md5'] = hashlib.md5(romdata).hexdigest().upper()
        self.data['sha1'] = hashlib.sha1(romdata).hexdigest().upper()

        #~ # Calculate the correct complement check for this Rom
        # Adapted from https://github.com/project64/project64/pull/491/files
        # 32-bit types (DWORD on Windows)
        # Eh, it's not working. Comment out for posterity/future fixes.
        # Could be relying on overflow maybe?
        #~ v1 = 0
        #~ t0 = 0

        #~ t1 = 0x1000
        #~ t5 = 0x20

        #~ v0 = 0xF8CA4DDB + 1; # 0xFFFFFFFF & (0x3F * 0x5D588B65)
        #~ a3 = v0
        #~ t2 = v0
        #~ t3 = v0
        #~ s0 = v0
        #~ a2 = v0
        #~ t4 = v0

        #~ while t0 < 0x00100000:
            #~ # *(DWORD *)(m_ROMImage + t1);
            #~ # (Note: Algorithm comes from a little Endian processor!)
            #~ (v0,) = struct.unpack( '<L', romdata[t1:t1+4] )

            #~ v1 = a3 + v0
            #~ a1 = v1

            #~ if (v1 < a3):
                #~ t2 += 0x1
            #~ v1 = v0 & 0x001F
            #~ t7 = t5 - v1

            #~ a0 = (v0 << v1) | (v0 >> t7)

            #~ a3 = a1
            #~ t3 = t3 ^ v0

            #~ s0 = s0 + a0

            #~ if (a2 < v0):
                #~ a2 = a3 ^ v0 ^ a2
            #~ else:
                #~ a2 = a2 ^ a0

            #~ t4 = (v0 ^ s0) + t4
            #~ t0 += 4
            #~ t1 += 4

        #~ a3 = a3 ^ t2 ^ t3;
        #~ s0 = s0 ^ a2 ^ t4;

        #~ self.data['act1'] = '0x{:08X}'.format(0xFFFFFFFF & a3)
        #~ self.data['act2'] = '0x{:08X}'.format(0xFFFFFFFF & s0)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("""Usage: n64info [n64 file(s)]...
""")
    else:
        with open('N64.tsv', 'w', encoding='UTF8') as outfile:


            writer = csv.DictWriter(outfile, ['filename', 
                'name', 
                'code', 
                'clockrate',
                'release',
                'CRC1',
                'CRC2',
                'filesize', 'crc', 'md5', 'sha1'], dialect=csv.excel_tab)
            writer.writeheader()
            for filename in sys.argv[1:]:
                print(filename)
                rom = n64rom(filename)
                writer.writerow(rom.data)


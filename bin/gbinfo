#!/usr/bin/python3
# Copyright 2016 Ryan Armstrong
#
# This file is part of Game Header Lister.
#
# Game Header Lister is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Game Header Lister is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Game Header Lister.
# If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import struct
import csv
import hashlib
import binascii
import ninlicensee

import pdb

colorcompat = {0x80: 'GB/GBC', 0xC0 : 'GBC Only'}

romtype = {
    0x0: 'ROM', 
    0x1: 'ROM + MBC1', 
    0x2: 'ROM + MBC1 + RAM', 
    0x3: 'ROM + MBC1 + RAM + BATTERY', 
    0x5: 'ROM + MBC2', 
    0x6: 'ROM + MBC2 + BATTERY', 
    0x8: 'ROM + RAM', 
    0x9: 'ROM + RAM + BATTERY', 
    0x0B: 'ROM + MMMO1', 
    0x0C: 'ROM + MMMO1 + SRAM', 
    0x0D: 'ROM + MMMO1 + SRAM + BATTERY', 
    0x0F: 'ROM + MBC3 + TIMER + BATTERY', 
    0x10: 'ROM + MBC3 + TIMER + RAM + BATTERY', 
    0x11: 'ROM + MBC3', 
    0x12: 'ROM + MBC3 + RAM', 
    0x13: 'ROM + MBC3 + RAM + BATTERY', 
    0x19: 'ROM + MBC5', 
    0x1A: 'ROM + MBC5 + RAM', 
    0x1B: 'ROM + MBC5 + RAM + BATTERY', 
    0x1C: 'ROM + MBC5 + RUMBLE', 
    0x1D: 'ROM + MBC5 + RUMBLE + SRAM', 
    0x1E: 'ROM + MBC5 + RUMBLE + SRAM + BATTERY', 
    0x1F: 'POCKET CAMERA', 
    0xFD: 'BANDAI TAMA5', 
    0xFE: 'HUDSON HuC 3', 
    0xFF: 'HUDSON HuC 1' 
}

romsize = {
    0x00 : '32 kb',
    0x01 : '64 kb',
    0x02 : '128 kb',
    0x03 : '256 kb',
    0x04 : '512 kb',
    0x05 : '1024 kb',
    0x06 : '2048 kb',
    0x07 : '4096 kb',
    0x52 : '1152 kb',
    0x53 : '1280 kb',
    0x54 : '1536 kb'
}

ramsize = {
    0x00 : '',
    0x01 : '2 kb',
    0x02 : '8 kb',
    0x03 : '32 kb',
    0x04 : '128 kb'
}



class gbrom:

    # From http://www.enliten.force9.co.uk/gameboy/carthead.htm
    # Though http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header is a better reference
    # Reformatted and re-ordered for use
    # Size	Content
    # 1	NOP
    # 3	JP ????h
    # 48	Nintendo Logo
    # 15	Game Title
    # 1	Colour Compatibility
    # 1	New Licensee Code MSB
    # 1	New Licensee Code LSB
    # 1	GB/SGB Function
    # 1	Cartridge Type
    # 1	Cartridge ROM Size
    # 1	Cartridge RAM Size
    # 1	Destination Code
    # 1	Old Licensee Code
    # 1	Mask ROM Version
    # 1	Complement Checksum
    # 1	Checksum MSB
    # 1	Checksum LSB
    header_fmt='>4x48s16s2sBBBBBBBBH'

    def __init__(self, filename):
        self.data = dict()
        self.data['filename'] = filename

        # Read from the default location
        romfile = open(filename, 'rb')
        romfile.seek(0x100)

        rawdata = struct.unpack(self.header_fmt,
            romfile.read(struct.calcsize(self.header_fmt)))
            
        # 0 : TODO DO SOMETHING WITH NINTENDO LOGO
        
        #~ pdb.set_trace()
        
        # 1 : Name and colour compatibility
        gbccode = rawdata[1][-1]
        if gbccode in colorcompat:
            # GBC compatible. May also have name/code pair in name field
            # Strip off last character when decoding the string
            namecode = rawdata[1][:-1].decode().strip('\0')
            
            if '\0' in namecode or gbccode == 0xC0:
                self.data['name'] = namecode[:-4].strip('\0')
                self.data['code'] = namecode[-4:]
            else:
                self.data['name'] = namecode
                self.data['code'] = ''
                
            self.data['colour compat'] = colorcompat[gbccode]
 
        else:
            # Original Game Boy with full 16-character name
            self.data['name'] = rawdata[1].decode().strip('\0')
            self.data['colour compat'] = 'Original GB'


        # Other fields:
        if rawdata[3]:
            self.data['sgb'] = 'Yes'
        else:
            self.data['sgb'] = ''

        try:
            self.data['cart type'] = romtype[rawdata[4]]
        except Exception:
            self.data['cart type'] = 'Unknown ({:02X})'.format(rawdata[4])

        try:
            self.data['rom size'] = romsize[rawdata[5]]
        except Exception:
            self.data['rom size'] = 'Unknown ({:02X})'.format(rawdata[5])

        try:
            self.data['ram size'] = ramsize[rawdata[6]]
        except Exception:
            self.data['ram size'] = 'Unknown ({:02X})'.format(rawdata[6])

        self.data['dest code'] = rawdata[7]
        
        # Licensee Codes
        if rawdata[8] == 51:
            self.data['licensee code type'] = 'New'

            try:
                self.data['licensee code'] = ninlicensee.newlic[rawdata[2].decode()]
            except Exception:
                pdb.set_trace()
                self.data['licensee code'] = 'Unknown ({})'.format(rawdata[2])
        else:
            self.data['licensee code type'] = 'Old'
            
            try:
                self.data['licensee code'] = ninlicensee.oldlic[rawdata[8]]
            except Exception:
                pdb.set_trace()
                self.data['licensee code'] = 'Unknown ({:02X})'.format(rawdata[8])
        
        self.data['version'] = rawdata[9]
        self.data['compl check'] = '0x{:02X}'.format(rawdata[10])
        self.data['checksum'] = '0x{:04X}'.format(rawdata[11])

            
        # Read full file data and calculate relevant hashes:
        romfile.seek(0)
        romdata = romfile.read()

        self.data['filesize'] = len(romdata)
        self.data['crc'] = '{:08X}'.format(binascii.crc32(romdata))
        self.data['md5'] = hashlib.md5(romdata).hexdigest().upper()
        self.data['sha1'] = hashlib.sha1(romdata).hexdigest().upper()

        # Calculate the correct checksum for this Rom
        sumval = 0
        highbyte = True
        for byteval in romdata:
            sumval += byteval
            
        # Subtrack out the checksum bytes
        sumval -= 0xFF & rawdata[11]
        sumval -= rawdata[11] >> 8

        self.data['actsum'] = '0x{:04X}'.format(0xFFFF & sumval)
        self.data['chksum match'] = (self.data['actsum'] == self.data['checksum'])



if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("""Usage: gbinfo [gb/gbc file(s)]...
""")
    else:
        with open('Gameboy.tsv', 'w', encoding='UTF8') as outfile:

            writer = csv.DictWriter(outfile, ['filename', 
                'name', 
                'code', 
                'colour compat', 
                'sgb', 
                'cart type', 
                'rom size', 
                'ram size', 
                'dest code', 
                'licensee code', 
                'licensee code type', 
                'version', 
                'compl check', 
                'checksum', 
                'actsum', 'chksum match',
                'filesize', 'crc', 'md5', 'sha1'], dialect=csv.excel_tab)
            writer.writeheader()
            for filename in sys.argv[1:]:
                print(filename)
                rom = gbrom(filename)
                writer.writerow(rom.data)

